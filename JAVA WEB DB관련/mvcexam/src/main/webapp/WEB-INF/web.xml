<?xml version="1.0" encoding="UTF-8"?>
<web-app> <!-- 이렇게 추가해야 Spring에서 제공하고 있는 DispatcherServlet이 FrontController의 역할을 할 수 있을 거고요.DispatcherServlet이 실행될 때 이런 설정(WebMvcContextConfiguration)들을 읽어다가 실행해 줘요.-->
  <display-name>Spring JavaConfig Sample</display-name>
  <servlet>
    <servlet-name>mvc</servlet-name> <!-- 이게실행될거임 -->
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>  				<!-- Spring이 제공하고 있는 DispatcherServlet, 이것을 FrontController로 할 거예요.라고 서블릿 클래스가등록되어있음 --> <!-- 그런 다음에 우리가 아까 만들었던 WebMvcContextConfiguration.javaConfiguration 파일이 있었잖아요 해당 DispatcherServlet이 실행될 때 설정들을 읽어내야 되잖아요. 그래서 아까 만들었던 여기에 들어있는 설정들 이런 것들 읽어내서 수행이 되어야 될 테니까 그 부분이 지금 여기 init-param 부분에다가 설정을 하고 있는 걸 볼 수 있을 거고요.-->
    <init-param>
      <param-name>contextClass</param-name><!-- IoC 우리 실습하시면서 Bean 공장 같은 거 있어야 돼요.ApplicationContext 있었잖아요. 그거 기억해내시면 되는데 지금 현재 이게 실행이 될 때는 AnnotationConfigWebApplicationContext 를 사용을 할 거다. 지금 이런 부분들을 등록을 하고 있는 거를 볼 수 있겠죠.   -->
      <param-value>org.springframework.web.context.support.AnnotationConfigWebApplicationContext</param-value>
    </init-param>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>kr.or.connect.mvcexam.config.WebMvcContextConfiguration</param-value><!-- 여러분이 아까 작성하셨던 그 부분이죠? 그 클래스가 등록이 되고 있어요.항상 클래스 등록하실 때는 패키지 명을 포함해서 등록하셔야지 돼요. -->
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>mvc</servlet-name>
    <url-pattern>/</url-pattern> <!-- 모든 요청이 들어오면 mvc와 이름이 같은 서블릿실행되어라 -->
  </servlet-mapping>
</web-app>